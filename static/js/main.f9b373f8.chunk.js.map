{"version":3,"sources":["App.js","serviceWorker.js","index.js","churchchimedanielsimon.mp3"],"names":["Alert","react_default","a","createElement","lib_default","url","alarmSound","playStatus","this","props","playing","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","timerStarted","timerStopped","minutes","seconds","alarmStatus","Sound","status","STOPPED","setState","clearInterval","timer","PLAYING","handleReset","e","_this2","preventDefault","setInterval","prevState","handleAlert","buttonSwitch","className","onClick","handleTimerStart","bind","App_Alert","handlePlusTime","handleMinTime","data-toggle","handleTimerStop","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.f9b373f8.chunk.js","sourcesContent":["// eslint-disable-next-line\nimport React, { Component } from 'react';\nimport './App.css';\nimport alarmSound from './churchchimedanielsimon.mp3';\nimport Sound from 'react-sound';\n\nclass Alert extends React.Component {\n\trender() {\n\t\treturn <Sound url={alarmSound} playStatus={this.props.playing} />;\n\t}\n}\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttimerStarted: false,\n\t\t\ttimerStopped: true,\n\t\t\tminutes: 25,\n\t\t\tseconds: 0,\n\t\t\talarmStatus: Sound.status.STOPPED\n\t\t};\n\t}\n\n\thandleReset() {\n\t\tthis.setState({\n\t\t\ttimerStarted: false,\n\t\t\ttimerStopped: true,\n\t\t\tseconds: 0,\n\t\t\tminutes: 25\n\t\t});\n\t\tclearInterval(this.timer);\n\t}\n\thandleTimerStop() {\n\t\tthis.setState({ timerStarted: false, timerStopped: true, alarmStatus: Sound.status.STOPPED });\n\t\tclearInterval(this.timer);\n\t}\n\n\thandleAlert() {\n\t\tthis.setState({ alarmStatus: Sound.status.PLAYING });\n\t\t//alert('Take a break!');\n\t\tthis.handleReset();\n\t}\n\thandleTimerStart(e) {\n\t\te.preventDefault();\n\t\tif (this.state.timerStopped) {\n\t\t\t//start button only works if not counting down\n\t\t\tthis.timer = setInterval(() => {\n\t\t\t\tthis.setState({ timerStarted: true, timerStopped: false });\n\t\t\t\tif (this.state.timerStarted) {\n\t\t\t\t\t//count down when press start button\n\t\t\t\t\tif (this.state.seconds === 0) {\n\t\t\t\t\t\tthis.setState((prevState) => ({\n\t\t\t\t\t\t\tminutes: prevState.minutes - 1,\n\t\t\t\t\t\t\tseconds: 60\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t\tthis.setState((prevState) => ({\n\t\t\t\t\t\tseconds: prevState.seconds - 1\n\t\t\t\t\t}));\n\t\t\t\t\t//alert if timer is done\n\t\t\t\t\tif (this.state.minutes === 0 && this.state.seconds === 0) {\n\t\t\t\t\t\tthis.handleAlert();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 1000);\n\t\t}\n\t}\n\n\thandlePlusTime() {\n\t\t//add minutes to timer\n\t\tif (this.state.timerStopped) {\n\t\t\tthis.setState({\n\t\t\t\tminutes: this.state.minutes + 1\n\t\t\t});\n\t\t}\n\t}\n\thandleMinTime() {\n\t\t//substract minutes from timer\n\t\tif (this.state.timerStopped) {\n\t\t\tthis.setState({\n\t\t\t\tminutes: this.state.minutes - 1\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\t//render the clock + buttons\n\n\t\tlet buttonSwitch;\n\t\tif (this.state.timerStopped) {\n\t\t\t//play button hidden when counting\n\t\t\tbuttonSwitch = (\n\t\t\t\t<button className=\"btn btn-success\" onClick={this.handleTimerStart.bind(this)}>\n\t\t\t\t\t<i className=\"fas fa-play\" />\n\t\t\t\t</button>\n\t\t\t);\n\t\t} else {\n\t\t\tbuttonSwitch = (\n\t\t\t\t<button className=\"hidden\" onClick={this.handleTimerStart.bind(this)}>\n\t\t\t\t\t<i className=\"fas fa-play\" />\n\t\t\t\t</button>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<Alert playing={this.state.alarmStatus} />\n\t\t\t\t<div className=\"clock\">\n\t\t\t\t\t<h2 className=\"text-center\">Pomodoro Timer</h2>\n\t\t\t\t\t<div className=\"timer-container\">\n\t\t\t\t\t\t<div className=\"timer-controls\">\n\t\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.handlePlusTime.bind(this)}>\n\t\t\t\t\t\t\t\t<i className=\"fas fa-plus\" />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"current-timer\">{this.state.minutes + ':' + this.state.seconds}</div>\n\n\t\t\t\t\t\t<div className=\"timer-controls\">\n\t\t\t\t\t\t\t<button className=\"btn btn-primary\" onClick={this.handleMinTime.bind(this)}>\n\t\t\t\t\t\t\t\t<i className=\"fas fa-minus\" />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"controls btn-group btn-group-toggle\" data-toggle=\"buttons\">\n\t\t\t\t\t\t{buttonSwitch}\n\t\t\t\t\t\t<button className=\"btn btn-danger\" onClick={this.handleTimerStop.bind(this)}>\n\t\t\t\t\t\t\t<i className=\"fas fa-stop\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button className=\"btn btn-info\" onClick={this.handleReset.bind(this)}>\n\t\t\t\t\t\t\t<i className=\"fas fa-undo-alt\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/churchchimedanielsimon.f7f6af38.mp3\";"],"sourceRoot":""}